// Copyright 2023 The etcd Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by `make codegen`. DO NOT EDIT.

package options

import (
	e2e "go.etcd.io/etcd/tests/v3/framework/e2e"
	"time"
)

func WithSnapshotCount(input ...uint64) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.SnapshotCount = input[internalRand.Intn(len(input))]
	}
}

func WithSnapshotCatchUpEntries(input ...uint64) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.SnapshotCatchUpEntries = input[internalRand.Intn(len(input))]
	}
}

func WithMaxSnapFiles(input ...uint) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.MaxSnapFiles = input[internalRand.Intn(len(input))]
	}
}

func WithMaxWalFiles(input ...uint) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.MaxWalFiles = input[internalRand.Intn(len(input))]
	}
}

func WithTickMs(input ...uint) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.TickMs = input[internalRand.Intn(len(input))]
	}
}

func WithElectionMs(input ...uint) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ElectionMs = input[internalRand.Intn(len(input))]
	}
}

func WithInitialElectionTickAdvance(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.InitialElectionTickAdvance = input[internalRand.Intn(len(input))]
	}
}

func WithBackendBatchInterval(input ...time.Duration) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.BackendBatchInterval = input[internalRand.Intn(len(input))]
	}
}

func WithBackendBatchLimit(input ...int) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.BackendBatchLimit = input[internalRand.Intn(len(input))]
	}
}

func WithQuotaBackendBytes(input ...int64) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.QuotaBackendBytes = input[internalRand.Intn(len(input))]
	}
}

func WithMaxTxnOps(input ...uint) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.MaxTxnOps = input[internalRand.Intn(len(input))]
	}
}

func WithMaxRequestBytes(input ...uint) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.MaxRequestBytes = input[internalRand.Intn(len(input))]
	}
}

func WithMaxConcurrentStreams(input ...uint32) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.MaxConcurrentStreams = input[internalRand.Intn(len(input))]
	}
}

func WithClientAutoTLS(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ClientAutoTLS = input[internalRand.Intn(len(input))]
	}
}

func WithPeerAutoTLS(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.PeerAutoTLS = input[internalRand.Intn(len(input))]
	}
}

func WithSelfSignedCertValidity(input ...uint) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.SelfSignedCertValidity = input[internalRand.Intn(len(input))]
	}
}

func WithStrictReconfigCheck(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.StrictReconfigCheck = input[internalRand.Intn(len(input))]
	}
}

func WithGRPCKeepAliveMinTime(input ...time.Duration) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.GRPCKeepAliveMinTime = input[internalRand.Intn(len(input))]
	}
}

func WithGRPCKeepAliveInterval(input ...time.Duration) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.GRPCKeepAliveInterval = input[internalRand.Intn(len(input))]
	}
}

func WithGRPCKeepAliveTimeout(input ...time.Duration) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.GRPCKeepAliveTimeout = input[internalRand.Intn(len(input))]
	}
}

func WithPreVote(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.PreVote = input[internalRand.Intn(len(input))]
	}
}

func WithBcryptCost(input ...uint) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.BcryptCost = input[internalRand.Intn(len(input))]
	}
}

func WithAuthTokenTTL(input ...uint) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.AuthTokenTTL = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalInitialCorruptCheck(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalInitialCorruptCheck = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalCorruptCheckTime(input ...time.Duration) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalCorruptCheckTime = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalCompactHashCheckEnabled(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalCompactHashCheckEnabled = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalCompactHashCheckTime(input ...time.Duration) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalCompactHashCheckTime = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalEnableLeaseCheckpoint(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalEnableLeaseCheckpoint = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalEnableLeaseCheckpointPersist(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalEnableLeaseCheckpointPersist = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalCompactionBatchLimit(input ...int) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalCompactionBatchLimit = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalCompactionSleepInterval(input ...time.Duration) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalCompactionSleepInterval = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalWatchProgressNotifyInterval(input ...time.Duration) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalWatchProgressNotifyInterval = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalWarningApplyDuration(input ...time.Duration) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalWarningApplyDuration = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalBootstrapDefragThresholdMegabytes(input ...uint) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalBootstrapDefragThresholdMegabytes = input[internalRand.Intn(len(input))]
	}
}

func WithWarningUnaryRequestDuration(input ...time.Duration) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.WarningUnaryRequestDuration = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalWarningUnaryRequestDuration(input ...time.Duration) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalWarningUnaryRequestDuration = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalMaxLearners(input ...int) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalMaxLearners = input[internalRand.Intn(len(input))]
	}
}

func WithForceNewCluster(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ForceNewCluster = input[internalRand.Intn(len(input))]
	}
}

func WithEnablePprof(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.EnablePprof = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalEnableDistributedTracing(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalEnableDistributedTracing = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalDistributedTracingSamplingRatePerMillion(input ...int) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalDistributedTracingSamplingRatePerMillion = input[internalRand.Intn(len(input))]
	}
}

func WithEnableLogRotation(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.EnableLogRotation = input[internalRand.Intn(len(input))]
	}
}

func WithEnableGRPCGateway(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.EnableGRPCGateway = input[internalRand.Intn(len(input))]
	}
}

func WithUnsafeNoFsync(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.UnsafeNoFsync = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalDowngradeCheckTime(input ...time.Duration) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalDowngradeCheckTime = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalMemoryMlock(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalMemoryMlock = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalTxnModeWriteWithSharedBuffer(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalTxnModeWriteWithSharedBuffer = input[internalRand.Intn(len(input))]
	}
}

func WithExperimentalStopGRPCServiceOnDefrag(input ...bool) e2e.EPClusterOption {
	return func(c *e2e.EtcdProcessClusterConfig) {
		c.ServerConfig.ExperimentalStopGRPCServiceOnDefrag = input[internalRand.Intn(len(input))]
	}
}
